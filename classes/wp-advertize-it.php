<?php

if (!class_exists('WordPress_Advertize_It')) {

    /**
     * Main / front controller class
     */
    class WordPress_Advertize_It extends WPAI_Module
    {
        protected static $readable_properties = array(); // These should really be constants, but PHP doesn't allow class constants to be arrays
        protected static $writeable_properties = array();
        protected $modules;

        const VERSION = '0.7';
        const PREFIX = 'wpai_';
        const DEBUG_MODE = false;


        /*
         * Magic methods
         */

        /**
         * Constructor
         *
         * @mvc Controller
         */
        protected function __construct()
        {
            $this->register_hook_callbacks();

            $this->modules = array(
                'WPAI_Settings' => WPAI_Settings::get_instance()
            );
        }


        /*
         * Static methods
         */

        /**
         * Enqueues CSS, JavaScript, etc
         *
         * @mvc Controller
         */
        public static function load_resources()
        {
            wp_register_script(
                self::PREFIX . 'wp-advertize-it',
                plugins_url('javascript/wp-advertize-it.js', dirname(__FILE__)),
                array('jquery'),
                self::VERSION,
                true
            );

	        wp_register_script(
		        self::PREFIX . 'wp-advertize-it-admin',
		        plugins_url('javascript/wp-advertize-it-admin.js', dirname(__FILE__)),
		        array('jquery'),
		        self::VERSION,
		        true
	        );

	        wp_register_script(
		        self::PREFIX . 'ace',
		        plugins_url('ace/ace.js', dirname(__FILE__)),
		        array('jquery'),
		        self::VERSION,
		        true
	        );

            wp_register_style(
                self::PREFIX . 'admin',
                plugins_url('css/admin.css', dirname(__FILE__)),
                array(),
                self::VERSION,
                'all'
            );

            if (is_admin()) {
                if (!did_action('wp_enqueue_media')) {
                    wp_enqueue_media();
                }
                wp_enqueue_style(self::PREFIX . 'admin');
	            wp_enqueue_script(self::PREFIX . 'wp-advertize-it-admin');
	            wp_enqueue_script(self::PREFIX . 'ace');
            } else {
                wp_enqueue_script(self::PREFIX . 'wp-advertize-it');
            }
        }

        /**
         * Clears caches of content generated by caching plugins like WP Super Cache
         *
         * @mvc Model
         */
        protected static function clear_caching_plugins()
        {
            // WP Super Cache
            if (function_exists('wp_cache_clear_cache')) {
                wp_cache_clear_cache();
            }

            // W3 Total Cache
            if (class_exists('W3_Plugin_TotalCacheAdmin')) {
                $w3_total_cache = w3_instance('W3_Plugin_TotalCacheAdmin');

                if (method_exists($w3_total_cache, 'flush_all')) {
                    $w3_total_cache->flush_all();
                }
            }
        }


        /*
         * Instance methods
         */

        /**
         * Prepares sites to use the plugin during single or network-wide activation
         *
         * @mvc Controller
         *
         * @param bool $network_wide
         */
        public function activate($network_wide)
        {
            global $wpdb;

            if (function_exists('is_multisite') && is_multisite()) {
                if ($network_wide) {
                    $blogs = $wpdb->get_col("SELECT blog_id FROM $wpdb->blogs");

                    foreach ($blogs as $blog) {
                        switch_to_blog($blog);
                        $this->single_activate($network_wide);
                    }

                    restore_current_blog();
                } else {
                    $this->single_activate($network_wide);
                }
            } else {
                $this->single_activate($network_wide);
            }
        }

        /**
         * Runs activation code on a new WPMS site when it's created
         *
         * @mvc Controller
         *
         * @param int $blog_id
         */
        public function activate_new_site($blog_id)
        {
            switch_to_blog($blog_id);
            $this->single_activate(true);
            restore_current_blog();
        }

        /**
         * Prepares a single blog to use the plugin
         *
         * @mvc Controller
         *
         * @param bool $network_wide
         */
        protected function single_activate($network_wide)
        {
            foreach ($this->modules as $module) {
                $module->activate($network_wide);
            }
        }

        /**
         * Rolls back activation procedures when de-activating the plugin
         *
         * @mvc Controller
         */
        public function deactivate()
        {
            foreach ($this->modules as $module) {
                $module->deactivate();
            }
        }

        /**
         * Register callbacks for actions and filters
         *
         * @mvc Controller
         */
        public function register_hook_callbacks()
        {
            add_action('wpmu_new_blog', __CLASS__ . '::activate_new_site');
            add_action('wp_enqueue_scripts', __CLASS__ . '::load_resources');
            add_action('admin_enqueue_scripts', __CLASS__ . '::load_resources');

            add_action('init', array($this, 'init'));
            add_action('init', array($this, 'upgrade'), 11);
            add_action('init', array($this, 'editor_buttons'));

            add_filter('the_content', array($this, 'show_ad_in_content'));
            add_action('wp_footer', array($this, 'show_ad_below_footer'));
            add_action('comment_form', array($this, 'show_ad_below_comments'));

            add_shortcode('showad', array($this, 'handle_short_code'));
            add_action('wp_ajax_get_ad_list', array($this, 'get_ad_list'));
        }

        function editor_buttons()
        {
            if ((current_user_can('edit_posts') || current_user_can('edit_pages')) && get_user_option('rich_editing')) {
                add_filter('mce_external_plugins', array($this, 'add_buttons'));
                add_filter('mce_buttons', array($this, 'register_buttons'));
            }
        }

        function add_buttons($plugin_array)
        {
            $plugin_array['wpai'] = plugins_url('../javascript/shortcode.js', __file__);
            return $plugin_array;
        }

        function register_buttons($buttons)
        {
            array_push($buttons, 'showad');
            return $buttons;
        }

        function handle_short_code($attributes)
        {
            $ad_block = "";

            extract(shortcode_atts(array(
                'block' => ''
            ), $attributes));

            if ($block !== '') {
                return $this->get_ad_block($block);
            }

            return $ad_block;
        }

        function get_ad_block($block)
        {
            $ad_block = "";
            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            if (isset($blocks[intval($block) - 1])) {
                $ad_block = $blocks[intval($block) - 1];
            }
            return $ad_block;
        }

        function get_ad_list()
        {
            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            ?>
            <!DOCTYPE html>
            <head>
                <title>WP Advertize It - Insert Ad Block</title>
            </head>
            <body>
            <p>
                <label for="ad-block-select"><?php _e('Ad Block:'); ?></label>
                <select class="widefat" id="ad-block-select"
                        name="ad-block-select">
                    <?php foreach ($blocks as $i => $block) : ?>
                        <option style="padding-right: 10px;"
                                value="<?php echo esc_attr(($i + 1)); ?>"><?php echo 'Ad Block ' . ($i + 1); ?></option>
                    <?php endforeach; ?>
                </select>
            </p>
            </body>
            </html>
            <?php
            die;
        }

        public function get_suppress_post_id($options)
        {
            $suppress_post_id = array();

            foreach (explode(',', $options['suppress-post-id']) as $id) {
                $id2 = explode('-', $id);
                if (count($id2) == 1) {
                    array_push($suppress_post_id, $id2[0]);
                } else {
                    for ($i = $id2[0]; $i <= $id2[1]; $i++) {
                        array_push($suppress_post_id, $i);
                    }
                }
            }
            return $suppress_post_id;
        }

        public function get_suppress_url($options)
        {
            $suppress_url = array();

            foreach (explode(',', $options['suppress-url']) as $id) {
                array_push($suppress_url, $id);
            }
            return $suppress_url;
        }

        public function get_suppress_ipaddress($options)
        {
            $suppress_ipaddress = array();

            foreach (explode(',', $options['suppress-ipaddress']) as $id) {
                array_push($suppress_ipaddress, $id);
            }
            return $suppress_ipaddress;
        }

        public function get_suppress_referrer($options)
        {
            $suppress_referrer = array();

            foreach (explode(',', $options['suppress-referrer']) as $id) {
                array_push($suppress_referrer, $id);
            }
            return $suppress_referrer;
        }

        private function to_int_array($array_in)
        {
            $array_out = array();

            if (isset($array_in) && is_array($array_in)) {
                foreach ($array_in as $id) {
                    array_push($array_out, intval($id));
                }
            }
            return $array_out;
        }

        public function get_suppress_category($options)
        {
            return $this->to_int_array($options['suppress-category']);
        }

        public function get_suppress_tag($options)
        {
            return $this->to_int_array($options['suppress-tag']);
        }

        public function get_suppress_user($options)
        {
            return $this->to_int_array($options['suppress-user']);
        }

        public function get_suppress_format($options)
        {
            return $options['suppress-format'];
        }

        public function get_suppress_post_type($options)
        {
            return $options['suppress-post-type'];
        }

        public function get_suppress_language($options)
        {
            return $options['suppress-language'];
        }

        public function in_array_substr($needle, $haystack)
        {
            foreach ($haystack as $hay_item) {
                if ($hay_item !== "" && strpos($needle, $hay_item)) {
                    return true;
                }
            }
            return false;
        }

        public function is_suppress_specific($options, $content)
        {
            $suppress_post_id = $this->get_suppress_post_id($options);
            $suppress_category = $this->get_suppress_category($options);
            $suppress_tag = $this->get_suppress_tag($options);
            $suppress_user = $this->get_suppress_user($options);
            $suppress_format = $this->get_suppress_format($options);
            $suppress_post_type = $this->get_suppress_post_type($options);
            $suppress_language = $this->get_suppress_language($options);
            $suppress_url = $this->get_suppress_url($options);
            $suppress_referrer = $this->get_suppress_referrer($options);
            $suppress_ipaddress = $this->get_suppress_ipaddress($options);

            return ((count($suppress_format) > 0 && in_array(get_post_format(), $suppress_format))
                || (count($suppress_user) > 0 && in_array(get_the_author_meta('ID'), $suppress_user))
                || (count($suppress_tag) > 0 && has_tag($suppress_tag))
                || (count($suppress_category) > 0 && has_category($suppress_category))
                || (count($suppress_post_type) > 0 && in_array(get_post_type(get_the_ID()), $suppress_post_type))
                || (count($suppress_language) > 0 && function_exists('qtrans_getLanguage') && in_array(qtrans_getLanguage(), $suppress_language))
                || (count($suppress_url) > 0 && $this->in_array_substr(get_the_permalink(), $suppress_url))
                || (count($suppress_referrer) > 0 && $this->in_array_substr($_SERVER['HTTP_REFERER'], $suppress_referrer))
                || (count($suppress_ipaddress) > 0 && $this->in_array_substr($_SERVER['REMOTE_ADDR'], $suppress_ipaddress))
                || (!is_feed() && in_array(get_the_ID(), $suppress_post_id))
                || (!is_feed() && strpos($content, '<!--NoAds-->') !== false)
                || (!is_feed() && strpos($content, '<!--NoWidgetAds-->') !== false)
                || (is_single() && $options['suppress-on-posts'] == 1)
                || (is_page() && $options['suppress-on-pages'] == 1)
                || (is_attachment() && $options['suppress-on-attachment'] == 1)
                || (is_category() && $options['suppress-on-category'] == 1)
                || (is_tag() && $options['suppress-on-tag'] == 1)
                || (is_home() && $options['suppress-on-home'] == 1)
                || (is_front_page() && $options['suppress-on-front'] == 1)
                || (is_archive() && $options['suppress-on-archive'] == 1)
                || (is_author() && $options['suppress-on-author'] == 1)
                || (is_404() && $options['suppress-on-error'] == 1)
                || (function_exists('bnc_wptouch_is_mobile') && bnc_wptouch_is_mobile() && $options['suppress-on-wptouch'] == 1)
                || (is_user_logged_in() && $options['suppress-on-logged-in'] == 1)
            );
        }

        public function get_paragraph_count($content)
        {
            return substr_count($content, '</p>');
        }

        public function get_word_count($content)
        {
            return str_word_count(strip_tags($content));
        }

        public function get_character_count($content)
        {
            return strlen(strip_tags($content));
        }

        public function show_ad_in_content($content)
        {
            $homepage_below_title = "";
            $post_below_title = "";
            $post_below_content = "";
            $page_below_title = "";
            $page_below_content = "";

            $content = str_replace('</P>', '</p>', $content);
            $char_count = $this->get_character_count($content);
            $word_count = $this->get_word_count($content);
            $paragraph_count = $this->get_paragraph_count($content);

            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            $homepage_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['homepage-below-title'];
            $post_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-title'];
            $post_below_content_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-content'];
            $page_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-title'];
            $page_below_content_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-content'];
            $middle_of_post_block = $this->modules['WPAI_Settings']->settings['placements']['middle-of-post'];
            $middle_of_page_block = $this->modules['WPAI_Settings']->settings['placements']['middle-of-page'];
            $before_last_post_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['before-last-post-paragraph'];
            $before_last_page_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['before-last-page-paragraph'];
            $after_first_post_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['after-first-post-paragraph'];
            $after_first_page_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['after-first-page-paragraph'];

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content)) {
                return $content;
            }
            if (!is_feed() && strpos($content, '<!--NoHomePageAds-->') !== false) {
                $homepage_below_title_block = "";
            }
            if (!is_feed() && strpos($content, '<!--NoBelowTitleAds-->') !== false) {
                $post_below_title_block = "";
                $page_below_title_block = "";
                $homepage_below_title_block = "";
            }
            if (!is_feed() && strpos($content, '<!--NoBelowContentAds-->') !== false) {
                $post_below_content_block = "";
                $page_below_content_block = "";
                $homepage_below_title_block = "";
            }
            if (!is_feed() && strpos($content, '<!--NoMiddleOfContentAds-->') !== false) {
                $middle_of_post_block = "";
                $middle_of_page_block = "";
            }
            if (!is_feed() && strpos($content, '<!--NoBeforeLastParagraphAds-->') !== false) {
                $before_last_post_paragraph_block = "";
                $before_last_page_paragraph_block = "";
            }
            if (!is_feed() && strpos($content, '<!--NoAfterFirstParagraphAds-->') !== false) {
                $after_first_post_paragraph_block = "";
                $after_first_page_paragraph_block = "";
            }

            if ($homepage_below_title_block != "") {
                $homepage_below_title = WPAI_Settings::get_ad_block($blocks, $homepage_below_title_block);
            }
            if ($post_below_title_block != "") {
                $post_below_title = WPAI_Settings::get_ad_block($blocks, $post_below_title_block);
            }
            if ($post_below_content_block != "") {
                $post_below_content = WPAI_Settings::get_ad_block($blocks, $post_below_content_block);
            }
            if ($page_below_title_block != "") {
                $page_below_title = WPAI_Settings::get_ad_block($blocks, $page_below_title_block);
            }
            if ($page_below_content_block != "") {
                $page_below_content = WPAI_Settings::get_ad_block($blocks, $page_below_content_block);
            }
            if (is_single()
                && $middle_of_post_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $middle_of_post = WPAI_Settings::get_ad_block($blocks, $middle_of_post_block);
                $middle_paragraph = (int)($paragraph_count / 2);
                $index = 0;
                for ($i = 0; $i < $middle_paragraph; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $middle_of_post, $index, 0);
            } else if (is_page()
                && $middle_of_page_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $middle_of_page = WPAI_Settings::get_ad_block($blocks, $middle_of_page_block);
                $middle_paragraph = (int)($paragraph_count / 2);
                $index = 0;
                for ($i = 0; $i < $middle_paragraph; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $middle_of_page, $index, 0);
            }
            if (is_single()
                && $before_last_post_paragraph_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $before_last_post_paragraph = WPAI_Settings::get_ad_block($blocks, $before_last_post_paragraph_block);
                $index = 0;
                for ($i = 0; $i < $paragraph_count - 1; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $before_last_post_paragraph, $index, 0);
            } else if (is_page()
                && $before_last_page_paragraph_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $before_last_page_paragraph = WPAI_Settings::get_ad_block($blocks, $before_last_page_paragraph_block);
                $index = 0;
                for ($i = 0; $i < $paragraph_count - 1; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $before_last_page_paragraph, $index, 0);
            }
            if (is_single()
                && $after_first_post_paragraph_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $after_first_post_paragraph = WPAI_Settings::get_ad_block($blocks, $after_first_post_paragraph_block);
                $index = 0;
                for ($i = 0; $i < 1; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $after_first_post_paragraph, $index, 0);
            } else if (is_page()
                && $after_first_page_paragraph_block != ""
                && intval($options['min-char-count']) <= $char_count
                && intval($options['min-word-count']) <= $word_count
                && intval($options['min-paragraph-count']) <= $paragraph_count
            ) {
                $after_first_page_paragraph = WPAI_Settings::get_ad_block($blocks, $after_first_page_paragraph_block);
                $index = 0;
                for ($i = 0; $i < 1; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $after_first_page_paragraph, $index, 0);
            }
            if (is_single()) {
                return $post_below_title . $content . $post_below_content;
            } else if (is_home()) {
                return $homepage_below_title . $content;
            } else if (is_page()) {
                return $page_below_title . $content . $page_below_content;
            } else {
                return $content;
            }
        }

        public function show_ad_below_footer()
        {
            $all_below_footer = "";

            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            $all_below_footer_block = $this->modules['WPAI_Settings']->settings['placements']['all-below-footer'];

            $content = get_the_content();

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content)) {
                return;
            }

            if ($all_below_footer_block != "") {
                $all_below_footer = WPAI_Settings::get_ad_block($blocks, $all_below_footer_block);
            }

            echo $all_below_footer;
        }

        public function show_ad_below_comments()
        {
            $post_below_comments = "";
            $page_below_comments = "";

            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            $post_below_comments_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-comments'];
            $page_below_comments_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-comments'];

            $content = get_the_content();

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content)) {
                return;
            }

            if ($post_below_comments_block != "") {
                $post_below_comments = WPAI_Settings::get_ad_block($blocks, $post_below_comments_block);
            }
            if ($page_below_comments_block != "") {
                $page_below_comments = WPAI_Settings::get_ad_block($blocks, $page_below_comments_block);
            }

            if (is_single()) {
                echo $post_below_comments;
            } else if (is_page()) {
                echo $page_below_comments;
            }
        }

        /**
         * Initializes variables
         *
         * @mvc Controller
         */
        public function init()
        {
            try {
                $instance_example = new WPAI_Instance_Class('Instance example', '42');
                //add_notice( $instance_example->foo .' '. $instance_example->bar );
            } catch (Exception $exception) {
                add_notice(__METHOD__ . ' error: ' . $exception->getMessage(), 'error');
            }
        }

        /**
         * Checks if the plugin was recently updated and upgrades if necessary
         *
         * @mvc Controller
         *
         * @param string $db_version
         */
        public function upgrade($db_version = 0)
        {
            if (version_compare($this->modules['WPAI_Settings']->settings['db-version'], self::VERSION, '==')) {
                return;
            }

            foreach ($this->modules as $module) {
                $module->upgrade($this->modules['WPAI_Settings']->settings['db-version']);
            }

            $this->modules['WPAI_Settings']->settings = array('db-version' => self::VERSION);
            self::clear_caching_plugins();
        }

        /**
         * Checks that the object is in a correct state
         *
         * @mvc Model
         *
         * @param string $property An individual property to check, or 'all' to check all of them
         * @return bool
         */
        protected function is_valid($property = 'all')
        {
            return true;
        }
    }

    ; // end WordPress_Advertize_It
}
